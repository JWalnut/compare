# John Walnut
# v 0.1
# Contains all methods and code for comparing two documents
# 6/27/16

from document import Document
import math

class Compare(object):
    @staticmethod
    def calculatePrimeLength(substring, document): #calculates to end of document (I'm calling it l'(s))
        # todo: incorrect type handling
        # print "Calculating length of substring \"", substring, "\" in document \"", document.body[:15], "...\""
        finalLength = document.length
        first = substring[:1]
        firstIndex = document.body.rfind(substring[:1])
        if firstIndex == -1:
            return 0
        # print "First Index = ", firstIndex
        nextIndex = firstIndex+1
        nextChar = 1
        while nextChar < len(substring):
            #print "Searching for \'", substring[nextChar:nextChar+1], "\'"
            tmp = document.body.rfind(substring[nextChar:nextChar+1], nextIndex)
            if tmp == -1:
                #print "Substring \"", substring, "\" does not exist in document \"", document.body[:15], "...\""
                return 0
            nextChar += 1
        # print "Length calculated!"
        return document.length - firstIndex + 1

    @staticmethod
    def calculateLength(substring, document): #calculates to end of substring (l(s) as in paper)
        # todo: incorrect type handling
        # print "Calculating length of substring \"", substring, "\" in document \"", document.body[:15], "...\""
        finalLength = document.length
        first = substring[:1]
        firstIndex = document.body.rfind(substring[:1])
        if firstIndex == -1:
            return 0
        # print "First Index = ", firstIndex
        nextIndex = firstIndex+1
        nextChar = 1
        tmp = 0
        while nextChar < len(substring):
            #print "Searching for \'", substring[nextChar:nextChar+1], "\'"
            tmp = document.body.rfind(substring[nextChar:nextChar+1], nextIndex)
            if tmp == -1:
                #print "Substring \"", substring, "\" does not exist in document \"", document.body[:15], "...\""
                return 0
            nextChar += 1
        # print "Length calculated!"
        
        return tmp - firstIndex + 1

    @staticmethod
    def K_Prime(doc1, doc2, n, lambd = 0.5):
        # note: doc1 is always the document from which substrings are taken
        #print "K_Prime() Started!"
        total = 0.0
        substring = doc1.generateConsecutiveSubstring(n)
        while substring != "":
            print "Working on substring \"", substring, "\""
            lofS = Compare.calculatePrimeLength(substring, doc1)
            if lofS == 0:
                substring = doc1.generateConsecutiveSubstring(n)
                continue
            lofT = Compare.calculatePrimeLength(substring, doc2)
            if lofT == 0:
                substring = doc1.generateConsecutiveSubstring(n)
                continue
            total += math.pow(lambd, lofS + lofT)
            #print "Running total: ", total
            substring = doc1.generateConsecutiveSubstring(n)
        return total

    
